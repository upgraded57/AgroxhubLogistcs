/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as authRegisterIndexImport } from './routes/(auth)/register/index'
import { Route as authLoginIndexImport } from './routes/(auth)/login/index'
import { Route as appRegionsIndexImport } from './routes/(app)/regions/index'
import { Route as appProfileIndexImport } from './routes/(app)/profile/index'
import { Route as appOrdersIndexImport } from './routes/(app)/orders/index'
import { Route as appNotificationsIndexImport } from './routes/(app)/notifications/index'
import { Route as appFinanceIndexImport } from './routes/(app)/finance/index'
import { Route as appDeliverablesIndexImport } from './routes/(app)/deliverables/index'
import { Route as appOrdersOrderIdImport } from './routes/(app)/orders/$orderId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authRegisterIndexRoute = authRegisterIndexImport.update({
  id: '/(auth)/register/',
  path: '/register/',
  getParentRoute: () => rootRoute,
} as any)

const authLoginIndexRoute = authLoginIndexImport.update({
  id: '/(auth)/login/',
  path: '/login/',
  getParentRoute: () => rootRoute,
} as any)

const appRegionsIndexRoute = appRegionsIndexImport.update({
  id: '/(app)/regions/',
  path: '/regions/',
  getParentRoute: () => rootRoute,
} as any)

const appProfileIndexRoute = appProfileIndexImport.update({
  id: '/(app)/profile/',
  path: '/profile/',
  getParentRoute: () => rootRoute,
} as any)

const appOrdersIndexRoute = appOrdersIndexImport.update({
  id: '/(app)/orders/',
  path: '/orders/',
  getParentRoute: () => rootRoute,
} as any)

const appNotificationsIndexRoute = appNotificationsIndexImport.update({
  id: '/(app)/notifications/',
  path: '/notifications/',
  getParentRoute: () => rootRoute,
} as any)

const appFinanceIndexRoute = appFinanceIndexImport.update({
  id: '/(app)/finance/',
  path: '/finance/',
  getParentRoute: () => rootRoute,
} as any)

const appDeliverablesIndexRoute = appDeliverablesIndexImport.update({
  id: '/(app)/deliverables/',
  path: '/deliverables/',
  getParentRoute: () => rootRoute,
} as any)

const appOrdersOrderIdRoute = appOrdersOrderIdImport.update({
  id: '/(app)/orders/$orderId',
  path: '/orders/$orderId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(app)/orders/$orderId': {
      id: '/(app)/orders/$orderId'
      path: '/orders/$orderId'
      fullPath: '/orders/$orderId'
      preLoaderRoute: typeof appOrdersOrderIdImport
      parentRoute: typeof rootRoute
    }
    '/(app)/deliverables/': {
      id: '/(app)/deliverables/'
      path: '/deliverables'
      fullPath: '/deliverables'
      preLoaderRoute: typeof appDeliverablesIndexImport
      parentRoute: typeof rootRoute
    }
    '/(app)/finance/': {
      id: '/(app)/finance/'
      path: '/finance'
      fullPath: '/finance'
      preLoaderRoute: typeof appFinanceIndexImport
      parentRoute: typeof rootRoute
    }
    '/(app)/notifications/': {
      id: '/(app)/notifications/'
      path: '/notifications'
      fullPath: '/notifications'
      preLoaderRoute: typeof appNotificationsIndexImport
      parentRoute: typeof rootRoute
    }
    '/(app)/orders/': {
      id: '/(app)/orders/'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof appOrdersIndexImport
      parentRoute: typeof rootRoute
    }
    '/(app)/profile/': {
      id: '/(app)/profile/'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof appProfileIndexImport
      parentRoute: typeof rootRoute
    }
    '/(app)/regions/': {
      id: '/(app)/regions/'
      path: '/regions'
      fullPath: '/regions'
      preLoaderRoute: typeof appRegionsIndexImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login/': {
      id: '/(auth)/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginIndexImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/register/': {
      id: '/(auth)/register/'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/orders/$orderId': typeof appOrdersOrderIdRoute
  '/deliverables': typeof appDeliverablesIndexRoute
  '/finance': typeof appFinanceIndexRoute
  '/notifications': typeof appNotificationsIndexRoute
  '/orders': typeof appOrdersIndexRoute
  '/profile': typeof appProfileIndexRoute
  '/regions': typeof appRegionsIndexRoute
  '/login': typeof authLoginIndexRoute
  '/register': typeof authRegisterIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/orders/$orderId': typeof appOrdersOrderIdRoute
  '/deliverables': typeof appDeliverablesIndexRoute
  '/finance': typeof appFinanceIndexRoute
  '/notifications': typeof appNotificationsIndexRoute
  '/orders': typeof appOrdersIndexRoute
  '/profile': typeof appProfileIndexRoute
  '/regions': typeof appRegionsIndexRoute
  '/login': typeof authLoginIndexRoute
  '/register': typeof authRegisterIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(app)/orders/$orderId': typeof appOrdersOrderIdRoute
  '/(app)/deliverables/': typeof appDeliverablesIndexRoute
  '/(app)/finance/': typeof appFinanceIndexRoute
  '/(app)/notifications/': typeof appNotificationsIndexRoute
  '/(app)/orders/': typeof appOrdersIndexRoute
  '/(app)/profile/': typeof appProfileIndexRoute
  '/(app)/regions/': typeof appRegionsIndexRoute
  '/(auth)/login/': typeof authLoginIndexRoute
  '/(auth)/register/': typeof authRegisterIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/orders/$orderId'
    | '/deliverables'
    | '/finance'
    | '/notifications'
    | '/orders'
    | '/profile'
    | '/regions'
    | '/login'
    | '/register'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/orders/$orderId'
    | '/deliverables'
    | '/finance'
    | '/notifications'
    | '/orders'
    | '/profile'
    | '/regions'
    | '/login'
    | '/register'
  id:
    | '__root__'
    | '/'
    | '/(app)/orders/$orderId'
    | '/(app)/deliverables/'
    | '/(app)/finance/'
    | '/(app)/notifications/'
    | '/(app)/orders/'
    | '/(app)/profile/'
    | '/(app)/regions/'
    | '/(auth)/login/'
    | '/(auth)/register/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  appOrdersOrderIdRoute: typeof appOrdersOrderIdRoute
  appDeliverablesIndexRoute: typeof appDeliverablesIndexRoute
  appFinanceIndexRoute: typeof appFinanceIndexRoute
  appNotificationsIndexRoute: typeof appNotificationsIndexRoute
  appOrdersIndexRoute: typeof appOrdersIndexRoute
  appProfileIndexRoute: typeof appProfileIndexRoute
  appRegionsIndexRoute: typeof appRegionsIndexRoute
  authLoginIndexRoute: typeof authLoginIndexRoute
  authRegisterIndexRoute: typeof authRegisterIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  appOrdersOrderIdRoute: appOrdersOrderIdRoute,
  appDeliverablesIndexRoute: appDeliverablesIndexRoute,
  appFinanceIndexRoute: appFinanceIndexRoute,
  appNotificationsIndexRoute: appNotificationsIndexRoute,
  appOrdersIndexRoute: appOrdersIndexRoute,
  appProfileIndexRoute: appProfileIndexRoute,
  appRegionsIndexRoute: appRegionsIndexRoute,
  authLoginIndexRoute: authLoginIndexRoute,
  authRegisterIndexRoute: authRegisterIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(app)/orders/$orderId",
        "/(app)/deliverables/",
        "/(app)/finance/",
        "/(app)/notifications/",
        "/(app)/orders/",
        "/(app)/profile/",
        "/(app)/regions/",
        "/(auth)/login/",
        "/(auth)/register/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(app)/orders/$orderId": {
      "filePath": "(app)/orders/$orderId.tsx"
    },
    "/(app)/deliverables/": {
      "filePath": "(app)/deliverables/index.tsx"
    },
    "/(app)/finance/": {
      "filePath": "(app)/finance/index.tsx"
    },
    "/(app)/notifications/": {
      "filePath": "(app)/notifications/index.tsx"
    },
    "/(app)/orders/": {
      "filePath": "(app)/orders/index.tsx"
    },
    "/(app)/profile/": {
      "filePath": "(app)/profile/index.tsx"
    },
    "/(app)/regions/": {
      "filePath": "(app)/regions/index.tsx"
    },
    "/(auth)/login/": {
      "filePath": "(auth)/login/index.tsx"
    },
    "/(auth)/register/": {
      "filePath": "(auth)/register/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
